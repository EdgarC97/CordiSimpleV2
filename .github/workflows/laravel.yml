name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Hacer checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Paso 3: Instalar dependencias de Composer
      - name: Install Composer dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install --no-interaction --prefer-dist

      # Paso 4: Instalar dependencias de npm
      - name: Install NPM dependencies
        run: |
          npm install

      # Paso 5: Crear el archivo .env de pruebas con los secretos (si es necesario)
      - name: Set up .env file
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "APP_ENV=testing" >> .env  # Establecer el entorno como testing
          # Agregar otros secretos si es necesario

      # Paso 6: Configurar MySQL (Docker)
      - name: Set up MySQL (Docker)
        run: |
          docker run --name mysql57 -e MYSQL_ROOT_PASSWORD=root_password -e MYSQL_DATABASE=laravel_db -e MYSQL_USER=user -e MYSQL_PASSWORD=password -p 3306:3306 -d mysql:5.7

      # Paso 7: Esperar a que MySQL esté listo
      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Esperando a que MySQL esté listo..."
            sleep 5
          done

      # Paso 8: Ejecutar pruebas con PHPUnit en la carpeta de Event
      - name: Run PHPUnit tests (Event)
        run: |
          ./vendor/bin/phpunit tests/Event

      # Paso 9: Desplegar al servidor (usando SSH)
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no user@yourserver.com "cd /path/to/your/project && git pull && php artisan migrate --force && php artisan config:cache && php artisan route:cache && php artisan optimize"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
