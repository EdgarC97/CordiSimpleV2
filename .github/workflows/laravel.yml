name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Hacer checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Paso 3: Instalar dependencias de Composer
      - name: Install Composer dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install --no-interaction --prefer-dist

      # Paso 4: Instalar dependencias de npm con Node.js 20
      - name: Install Node.js and NPM dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | sudo bash -  # Instalar Node.js 20 LTS
          sudo apt-get update
          sudo apt-get install -y nodejs  # Instalar Node.js
          npm install  # Instalar dependencias de npm

      # Paso 5: Generar los activos con Vite
      - name: Build assets with Vite
        run: |
          npm run build  # Esto generará el archivo manifest.json en /public/build

      # Paso 6: Crear el archivo .env de pruebas con los secretos (si es necesario)
      - name: Set up .env file
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "APP_ENV=production" >> .env  # Cambiar a producción para despliegue

      # Paso 7: Desplegar a Hostinger mediante SSH con contraseña
      - name: Deploy to Hostinger via SSH (with password)
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          # Instalar sshpass para pasar la contraseña
          sudo apt-get install -y sshpass
          
          # Verificar la conexión SSH
          echo "Verificando la conexión SSH con: $USERNAME@$HOST:$PORT"
          
          # Conexión SSH usando sshpass (contraseña) y ejecutar el despliegue
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST << 'EOF'
            # Cambiar a la ruta correcta del proyecto
            cd /home/u976542190/domains/koalacordisimple.jcomtec.com/public_html

            # Verificar si el repositorio Git está presente
            if [ ! -d ".git" ]; then
              echo "Clonando el repositorio Git..."
              git clone https://github.com/EdgarC97/CordiSimpleV2 .
            fi

            # Traer los últimos cambios
            git pull origin main

            # Instalar dependencias de Composer
            composer install --no-dev --optimize-autoloader

            # Ejecutar migraciones
            php artisan migrate --force

            # Instalar dependencias de npm
            npm install --production
            npm run build

            # Optimizar el caché y limpiar vistas
            php artisan config:cache
            php artisan route:cache
            php artisan view:clear
          EOF
