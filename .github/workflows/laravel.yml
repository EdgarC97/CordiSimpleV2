name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Hacer checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Paso 3: Instalar dependencias de Composer
      - name: Install Composer dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install --no-interaction --prefer-dist

      # Paso 4: Instalar dependencias de npm con Node.js 20
      - name: Install Node.js and NPM dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | sudo bash -  # Instalar Node.js 20 LTS
          sudo apt-get update
          sudo apt-get install -y nodejs  # Instalar Node.js
          npm install  # Instalar dependencias de npm

      # Paso 5: Generar los activos con Vite
      - name: Build assets with Vite
        run: |
          npm run build  # Esto generará el archivo manifest.json en /public/build

      # Paso 6: Crear el archivo .env de pruebas con los secretos (si es necesario)
      - name: Set up .env file
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "APP_ENV=production" >> .env  # Cambiar a producción para despliegue

      # Paso 7: Desplegar a Hostinger mediante SSH con contraseña
      - name: Deploy to Hostinger via SSH (with password)
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          # Instalar sshpass para pasar la contraseña
          sudo apt-get install -y sshpass
          
          # Verificar si la conexión SSH funciona correctamente
          echo "Verificando la conexión SSH con: $USERNAME@$HOST:$PORT"
          
          # Conexión SSH usando sshpass (contraseña) y ejecutar el despliegue
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST << 'EOF'
          
          # Verificación: Comprobar si la conexión SSH está funcionando correctamente
          echo "Verificando el usuario actual en el servidor"
          whoami  # Mostrar el usuario con el que estás conectado

          echo "Verificando si estamos en el directorio correcto"
          pwd  # Mostrar el directorio de trabajo actual

          # Comprobar si la ruta existe
          echo "Comprobando si la ruta ~/domains/koalacordisimple.jcomtec.com/public_html existe"
          if [ ! -d "~/domains/koalacordisimple.jcomtec.com/public_html" ]; then
            echo "El directorio no existe. Abortando el despliegue."
            exit 1
          fi

          # Asegurarse de estar en el directorio correcto
          cd ~/domains/koalacordisimple.jcomtec.com/public_html

          # Verificar los permisos del directorio
          echo "Verificando permisos del directorio public_html"
          ls -la

          # Continuar con el despliegue si todo es correcto
          git pull origin main
          composer install --no-dev --optimize-autoloader
          npm install --production
          npm run build
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan route:cache
          php artisan migrate --force
          sudo chown -R www-data:www-data storage bootstrap/cache

          EOF
